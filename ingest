#!/bin/bash
set -eu

# REQUIRED environment variables:
#
#  CACHE     -  Where to store the cached JSON files.
#  S3_AKI    -  Credentials for S3 card image storage
#  S3_KEY    -  Credentials for S3 card image storage
#  S3_BUCKET -  S3 card image storage bucket
#

ok=yes
if [[ -z "${CACHE:-}" ]]; then
  echo >&2 "Missing required environment variable CACHE;"
  echo >&2 "Please set CACHE to the absolute path of the cache"
  echo >&2 "directory, where I should store JSON fragments."
  echo >&2
  ok=no
fi

if [[ "${1:-}" = "--with-images" ]]; then
  shift
  IMAGES=yes
fi

IMAGES=${IMAGES:-no}
if [[ ${IMAGES} == "yes" ]]; then
  if [[ -z "${S3_AKI:-}" ]]; then
    echo >&2 "Missing required environment variable S3_AKI;"
    echo >&2 "Please set S3_AKI to the Amazon Web Services"
    echo >&2" Access Key ID for uploading card images."
    echo >&2
    ok=no
  fi

  if [[ -z "${S3_KEY:-}" ]]; then
    echo >&2 "Missing required environment variable S3_KEY;"
    echo >&2 "Please set S3_KEY to the Amazon Web Services"
    echo >&2" Secret Access Key for uploading card images."
    echo >&2
    ok=no
  fi

  if [[ -z "${S3_BUCKET:-}" ]]; then
    echo >&2 "Missing required environment variable S3_BUCKET;"
    echo >&2 "Please set S3_BUCKET to the Amazon Web Services"
    echo >&2" S3 bucket that holds card images."
    echo >&2
    ok=no
  fi
fi

if [[ $ok != "yes" ]]; then
  exit 1
fi

upload() {
  curl -sL $1 | s3 put --to $2 -
  s3 chacl $2 public-read
}

mkdir -p $CACHE

for code in "$@"; do
  echo "INGESTING set $code..."
  mkdir -p $CACHE/scry/$code/
  if [[ ! -s $CACHE/scry/$code/set.json ]]; then
    echo " - fetching set metadata from Scryfall API..."
    curl -sf https://api.scryfall.com/sets/$code -H Accept:application/json > $CACHE/scry/$code/set.json
  fi
  if [[ ! -s $CACHE/scry/$code/tok.json ]]; then
    echo " - fetching (token) set metadata from Scryfall API..."
    curl -sf https://api.scryfall.com/sets/T$code -H Accept:application/json > $CACHE/scry/$code/tok.json || echo '{}' > $CACHE/scry/$code/tok.json
  fi

  n=1
  for t in 'set' tok; do
    next=`jq -r .search_uri < $CACHE/scry/$code/$t.json`
    more="true"
    while [[ $next != "null" && $more == "true" ]]; do
      if [[ ! -s $CACHE/scry/$code/cards$n.json ]]; then
        echo "  - fetching card results page $n from Scryfall API..."
        curl -sf $next -H Accept:application/json > $CACHE/scry/$code/cards$n.json
      fi
      more=`jq -r .has_more  < $CACHE/scry/$code/cards$n.json`
      next=`jq -r .next_page < $CACHE/scry/$code/cards$n.json`
      n=`expr $n + 1`
    done
  done
  n=`expr $n - 1`

  rm -rf $CACHE/work/$code
  mkdir -p $CACHE/work/$code
  cp $CACHE/scry/$code/set.json \
     $CACHE/work/$code/set.json

  echo '{"cards":[]}' > $CACHE/work/$code/cards.json
  for n in `seq 1 $n`; do
    jq -r '{ cards: .data }' $CACHE/scry/$code/cards$n.json > $CACHE/work/$code/next.json
    jq -n --argfile a $CACHE/work/$code/cards.json \
          --argfile b $CACHE/work/$code/next.json \
          '{"cards": [ $a.cards[], $b.cards[] ]}' > $CACHE/work/$code/out.json
    mv $CACHE/work/$code/out.json \
       $CACHE/work/$code/cards.json
  done

  mkdir -p $CACHE/dat
  jq -n --argfile a $CACHE/scry/$code/set.json \
        --argfile b $CACHE/work/$code/cards.json \
        '$a * $b' > $CACHE/dat/$code.json

  if [[ ${DEBUG:-no} = "yes" ]]; then
    echo "scry:"; ls -l $CACHE/scry/$code/
    echo "work:"; ls -l $CACHE/work/$code/
    echo "final:"; jq -Mr . $CACHE/dat/$code.json
  fi

  if [[ ${IMAGES} = "yes" ]]; then
    jq <$CACHE/dat/$code.json -Mr '.cards[] | select(.layout == "transform" or .layout == "modal_dfc" or .layout == "double_faced_token") | [.id,.card_faces[0].image_uris.large,.card_faces[1].image_uris.large] | @tsv' |\
      while IFS=$'\t' read -r id front back; do
        echo " >> uploading cards images for (transform) card [$id]..."
        upload $front cards/$code/$code-$id.jpg
        upload $back  cards/$code/$code-$id.flip.jpg
      done

    jq <$CACHE/dat/$code.json -Mr '.cards[] | select(.layout != "transform" and .layout != "modal_dfc" and .layout != "double_faced_token") | [.id,.image_uris.large] | @tsv' |\
    while IFS=$'\t' read -r id front; do
        echo " >> uploading cards images for card [$id]..."
        upload $front cards/$code/$code-$id.jpg
    done
  fi
done
